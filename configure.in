AC_INIT([libuser], [0.53])
AC_CONFIG_HEADERS(config.h)
AC_CONFIG_SRCDIR([lib/user.c])
AC_CONFIG_AUX_DIR([admin])
AM_INIT_AUTOMAKE([subdir-objects -Wall])

AC_PROG_CC
AM_PROG_CC_C_O
AC_ISC_POSIX

AM_PROG_LIBTOOL

PKG_CHECK_MODULES(GLIB,[glib-2.0 gmodule-2.0])
PKG_CHECK_MODULES(GOBJECT,[glib-2.0 gobject-2.0])
PKG_CHECK_MODULES(GMODULE,[glib-2.0 gmodule-2.0 gobject-2.0])
AC_DEFINE(G_DISABLE_DEPRECATED,,[Stay away from deprecated glib functionality.])

ALL_LINGUAS="ar bg bn ca cs cy da de es fr hi hr hu is it ja ko mk ms nb nl no pa pl pt pt_BR ru sk sl sv ta tr uk vi zh_CN zh_TW"

AM_GNU_GETTEXT([external])
AM_GNU_GETTEXT_VERSION([0.14.1])
GETTEXT_PACKAGE=libuser
AC_SUBST(GETTEXT_PACKAGE)

LIBSAVE="$LIBS"
AC_CHECK_FUNC(crypt,,[AC_CHECK_LIB(crypt,crypt)])
CRYPT_LIBS="$LIBS"
LIBS="$LIBSAVE"

LIBSAVE="$LIBS"
AC_CHECK_HEADERS(security/pam_appl.h)
AC_CHECK_FUNC(pam_start,,[AC_CHECK_LIB(pam, pam_start)])
AC_CHECK_FUNC(pam_authenticate,,[AC_CHECK_LIB(pam, pam_authenticate)])
PAM_LIBS="$LIBS"
AC_CHECK_FUNC(misc_conv,,[AC_CHECK_LIB(pam_misc, misc_conv)])
PAM_MISC_LIBS="$LIBS"
LIBS="$LIBSAVE"

LIBSAVE="$LIBS"

popt=/usr
AC_ARG_WITH([popt], AS_HELP_STRING([--with-popt=DIR],
				   [use popt headers and libraries under DIR]),
[if test "x$withval" != x -a "x$withval" != xyes ; then
	popt=$withval
fi
])

if test x$popt != xno ; then
	if test x$popt != x -a x$popt != x/usr ; then
		CFLAGS="$CFLAGS -I$popt/include"
		CPPFLAGS="$CPPFLAGS -I$popt/include"
		LIBS="$LIBS -L$popt/lib"
	fi
	AC_CHECK_HEADERS(popt.h)
	AC_CHECK_FUNC(poptGetContext,,[AC_CHECK_LIB(popt,poptGetContext)])
fi
POPT_LIBS="$LIBS"
LIBS="$LIBSAVE"

AC_ARG_WITH([ldap],
	    AS_HELP_STRING([--with-ldap=DIR],
			   [use OpenLDAP 2.x headers and libraries under DIR]),
[if test "x$withval" != x -a "x$withval" != xno ; then
	ldap=$withval
else
	ldap=no
fi
],ldap=no)

build_ldap=no
if test x$ldap != xno ; then
	LIBSAVE="$LIBS"
	if test x$ldap != xyes -a x$ldap != x/usr ; then
		CFLAGS="$CFLAGS -I$ldap/include"
		CPPFLAGS="$CPPFLAGS -I$ldap/include"
		LDFLAGS="$LDFLAGS -L$ldap/lib"
		if test x$ldap != x/usr ; then
			LDAP_LDADD=-L$ldap/lib
		fi
		LIBS="$LIBS $LDAP_LDADD"
	fi
	AC_CHECK_HEADERS(ldap.h)
	AC_CHECK_FUNC(ber_alloc,,[
		AC_CHECK_LIB(lber,ber_alloc,[
			     LDAP_LIBS="-llber $LDAP_LIBS"
			     LIBS="-llber $LIBS"],,[$LDFLAGS $LIBS])])
	AC_CHECK_FUNC(ldap_sasl_bind_s,,[
		AC_CHECK_LIB(ldap,ldap_sasl_bind_s,[
			     LDAP_LIBS="-lldap $LDAP_LIBS"
			     LIBS="-lldap $LIBS"],,[$LDFLAGS $LIBS])])
	AC_CHECK_FUNC(ldap_sasl_interactive_bind_s,[
	AC_CHECK_FUNC(ldap_set_option,[
	AC_CHECK_FUNC(ldap_start_tls_s,[
	AC_CHECK_FUNC(ldap_search_s,[
	AC_CHECK_FUNC(ldap_get_values,[
	AC_CHECK_FUNC(ldap_modify_ext_s,[
	AC_CHECK_FUNC(ldap_delete_ext_s,[
	build_ldap=yes])])])])])])])
	LIBS="$LIBSAVE"
fi
AM_CONDITIONAL([LDAP], [test $build_ldap = yes])

AC_ARG_WITH([sasl],
	    AS_HELP_STRING([--with-sasl=DIR],
			   [use Cyrus SASL headers and libraries under DIR]),
[if test "x$withval" != x -a "x$withval" != xno ; then
	sasl=$withval
else
	sasl=no
fi
],sasl=no)

build_sasl=no
if test x$sasl != xno ; then
	LIBSAVE="$LIBS"
	if test x$sasl != xyes -a x$sasl != x/usr ; then
		CFLAGS="$CFLAGS -I$sasl/include"
		CPPFLAGS="$CPPFLAGS -I$sasl/include"
		LDFLAGS="$LDFLAGS -L$sasl/lib"
		if test x$sasl != x/usr ; then
			SASL_LDADD=-L$sasl/lib
		fi
		LIBS="$LIBS $SASL_LDADD"
	fi
	AC_CHECK_HEADERS([sasl/sasl.h])
	AC_CHECK_FUNC(sasl_setpass,,[
		AC_CHECK_LIB([sasl2],[sasl_setpass],[
			     SASL_LIBS="-lsasl2 $SASL_LIBS"
			     LIBS="-lsasl2 $LIBS"
			     build_sasl=yes]
			     ,,[$LDFLAGS $LIBS])])
	AC_CHECK_FUNCS(sasl_checkpass,,[
	AC_CHECK_LIB(sasl2,sasl_checkpass,[
	AC_DEFINE(HAVE_SASL_CHECKPASS,,[if sasl_checkpass() is defined])])])
	AC_CHECK_FUNCS(sasl_user_exists,,[
	AC_CHECK_LIB(sasl2,sasl_user_exists,[
	AC_DEFINE(HAVE_SASL_USER_EXISTS,,[if sasl_user_exists() is defined])])])
	LIBS="$LIBSAVE"
fi
AM_CONDITIONAL([SASL], [test $build_sasl = yes])

PYTHON_VERSION=2.2
AC_ARG_WITH([python-version],
	    AS_HELP_STRING([--with-python-version=2.2],
			   [version of Python to build modules for]),
	    [PYTHON_VERSION=$withval])

PYTHON_INC=/usr/include/python${PYTHON_VERSION}
AC_ARG_WITH([python-path],
	    AS_HELP_STRING([--with-python-path=DIR],
			[directory headers for your version of Python are in]),
	    [PYTHON_INC=$withval])


AC_ARG_WITH([selinux],
	    AS_HELP_STRING([--with-selinux],
			   [work with SELinux extensions (default is NO)]),
	    [selinux=$withval], [selinux=no])
if test "x$selinux" != xno ; then
    SELINUX_LIBS=-lselinux
    AC_DEFINE([WITH_SELINUX], [1], [Define to 1 to use SELinux extensions])
fi
AC_SUBST(SELINUX_LIBS)
   

AC_ARG_ENABLE([quota],
	      AS_HELP_STRING([--enable-quota],
			     [provide support for configuring quotas]),
	      [quota=$withval],[quota=no])
AM_CONDITIONAL([QUOTA], [test x$quota != xno])

AC_HEADER_STDC

AC_C_CONST
AC_TYPE_UID_T
AC_TYPE_MODE_T
AC_TYPE_OFF_T
AC_TYPE_SIZE_T

AC_CHECK_HEADERS([fcntl.h limits.h sys/time.h unistd.h])
AC_CHECK_FUNC(__secure_getenv)
AC_CHECK_FUNC(strstr)
AC_CHECK_FUNC(strtol)

# Modify CFLAGS after all tests are run (some of them could fail because
# of the -Werror).
if test "$GCC" = yes ; then
    AC_CACHE_CHECK([for available GCC warning flags],
		   [mitr_cv_prog_gcc_warnings],
    [mitr_cv_prog_gcc_warnings=""
    for i in -Wall -Wcast-align -Wmissing-noreturn -Wnested-externs dnl
-Wpointer-arith -Wstrict-prototypes -Wundef; do
        oldcflags=$CFLAGS
        CFLAGS="$CFLAGS $i"
        AC_COMPILE_IFELSE([AC_LANG_PROGRAM([], [])],
		[mitr_cv_prog_gcc_warnings="$mitr_cv_prog_gcc_warnings $i"])
	CFLAGS=$oldcflags
     done])
     CFLAGS="$CFLAGS $mitr_cv_prog_gcc_warnings"
     AC_MSG_CHECKING([whether we should use -Werror])
     AC_ARG_ENABLE([Werror],
		   AS_HELP_STRING([--enable-Werror],
			[use -Werror if compiling with gcc (default is NO)]),
		   [], enable_Werror=no)
     if test "x$enable_Werror" != xno; then
	CFLAGS="$CFLAGS -Werror"
     fi
     AC_MSG_RESULT([$enable_Werror])
fi


test "x$prefix" = xNONE && prefix=$ac_default_prefix
test "x$exec_prefix" = xNONE && exec_prefix=${prefix}

# FIXME: this doesn't work in general ("${prefix}/etc" etc.)
LOCALEDIR=`eval echo $datadir/locale`
AC_DEFINE_UNQUOTED(LOCALEDIR,"$LOCALEDIR",
		   [location where locale files will be installed])
MODULEDIR=`eval echo $libdir/$PACKAGE`
AC_DEFINE_UNQUOTED(MODULEDIR,"$MODULEDIR",
		   [location where modules will be installed])
AC_DEFINE_UNQUOTED(SYSCONFDIR,"$sysconfdir",
		   [location where config files will be installed])

GTK_DOC_CHECK

dnl Does not even compile
AM_CONDITIONAL([KRB5], [false])
AC_SUBST(CRYPT_LIBS)
AC_SUBST(KRB5_LDADD)
AC_SUBST(KRB5_LIBS)
AC_SUBST(LDAP_LDADD)
AC_SUBST(LDAP_LIBS)
AC_SUBST(PAM_LIBS)
AC_SUBST(PAM_MISC_LIBS)
AC_SUBST(POPT_LIBS)
AC_SUBST(SASL_LDADD)
AC_SUBST(SASL_LIBS)
AC_SUBST(PYTHON_VERSION)
AC_SUBST(PYTHON_INC)

scdir=`eval echo $sysconfdir`
AC_SUBST(scdir)

AC_CONFIG_FILES([Makefile po/Makefile.in docs/Makefile docs/reference/Makefile
libuser.conf libuser.pc])
AC_OUTPUT
